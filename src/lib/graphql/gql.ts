/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetAllProject @cached {\n  project {\n    id\n    keyword\n    projectName\n    price\n  }\n}\n\nquery GetDetailProject($id: Int) @cached {\n  project(where: {id: {_eq: $id}}) {\n    id\n    businessContent\n    contentBusiness\n    developmentEnvironment\n    keyword\n    personnelSought\n    price\n    projectName\n    recruitmentBackground\n    recruitmentNumber\n    requiredSkills\n    welcomeSkills\n    workingConditions\n  }\n}": types.GetAllProjectDocument,
    "query GetSkills($skillsWhere: skills_bool_exp = {_and: []}, $worksWhere: work_to_detail_bool_exp = {_and: []}) @cached {\n  skills(where: $skillsWhere) {\n    id\n    type\n    name\n    works_aggregate(where: $worksWhere) {\n      nodes {\n        work {\n          title\n        }\n      }\n      aggregate {\n        count\n      }\n    }\n  }\n}": types.GetSkillsDocument,
    "mutation useEditBasicInfo($id: String!, $lastName: String, $firstName: String, $lastNameKana: String, $firstNameKana: String, $birthdayYear: String, $birthdayMounth: String, $birthdayDay: String, $mail: String, $tel: String, $prefectures: String, $currentSituation: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {last_name: $lastName, first_name: $firstName, last_name_kana: $lastNameKana, first_name_kana: $firstNameKana, birthday_year: $birthdayYear, birthday_mounth: $birthdayMounth, birthday_day: $birthdayDay, mail: $mail, tel: $tel, prefectures: $prefectures, current_situation: $currentSituation}\n  ) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n  }\n}": types.UseEditBasicInfoDocument,
    "query GetUserBasicInfo($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n  }\n}": types.GetUserBasicInfoDocument,
    "query GetUserDesiredCondition($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}": types.GetUserDesiredConditionDocument,
    "query GetUserSkill($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n  }\n}": types.GetUserSkillDocument,
    "mutation editProfile($id: String!, $lastName: String, $firstName: String, $lastNameKana: String, $firstNameKana: String, $birthdayYear: String, $birthdayMounth: String, $birthdayDay: String, $mail: String, $tel: String, $prefectures: String, $currentSituation: String, $professionalExperience: [String!], $industries: [String!], $languageLibraries: [String!], $frameWork: [String!], $portfolio: String, $selfPr: String, $fileTitle: String, $filePath: String, $commutingTime: String, $amountOfMoney: String, $preferredPlaceOfWork: String, $desiredOccupation: [String!], $desiredIndustries: [String!], $desiredSkills: [String!], $modeOfOperation: [String!], $availableDay: String, $projectStartTime: String, $projectStartYear: String, $projectStartMounth: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {last_name: $lastName, first_name: $firstName, last_name_kana: $lastNameKana, first_name_kana: $firstNameKana, birthday_year: $birthdayYear, birthday_mounth: $birthdayMounth, birthday_day: $birthdayDay, mail: $mail, tel: $tel, prefectures: $prefectures, current_situation: $currentSituation, professional_experience: $professionalExperience, industries: $industries, language_libraries: $languageLibraries, frame_work: $frameWork, portfolio: $portfolio, self_pr: $selfPr, file_title: $fileTitle, file_path: $filePath, commuting_time: $commutingTime, amount_of_money: $amountOfMoney, preferred_place_of_work: $preferredPlaceOfWork, desired_occupation: $desiredOccupation, desired_industries: $desiredIndustries, desired_skills: $desiredSkills, mode_of_operation: $modeOfOperation, available_day: $availableDay, project_start_time: $projectStartTime, project_start_year: $projectStartYear, project_start_mounth: $projectStartMounth}\n  ) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}": types.EditProfileDocument,
    "query GetUserInfo($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}": types.GetUserInfoDocument,
    "query GetWork @cached {\n  work {\n    contractType\n    id\n    location\n    maxMonthlyPrice\n    maxWorkHours\n    minMonthlyPrice\n    minWorkHours\n    title\n    languages {\n      skill {\n        id\n        name\n        type\n      }\n    }\n  }\n}\n\nquery GetWorks($where: work_bool_exp = {_and: []}) @cached {\n  work(where: $where) {\n    id\n    title\n    contractType\n    location\n    maxMonthlyPrice\n    maxWorkHours\n    minMonthlyPrice\n    minWorkHours\n    languages {\n      skill {\n        id\n        name\n        type\n      }\n    }\n  }\n}": types.GetWorkDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllProject @cached {\n  project {\n    id\n    keyword\n    projectName\n    price\n  }\n}\n\nquery GetDetailProject($id: Int) @cached {\n  project(where: {id: {_eq: $id}}) {\n    id\n    businessContent\n    contentBusiness\n    developmentEnvironment\n    keyword\n    personnelSought\n    price\n    projectName\n    recruitmentBackground\n    recruitmentNumber\n    requiredSkills\n    welcomeSkills\n    workingConditions\n  }\n}"): (typeof documents)["query GetAllProject @cached {\n  project {\n    id\n    keyword\n    projectName\n    price\n  }\n}\n\nquery GetDetailProject($id: Int) @cached {\n  project(where: {id: {_eq: $id}}) {\n    id\n    businessContent\n    contentBusiness\n    developmentEnvironment\n    keyword\n    personnelSought\n    price\n    projectName\n    recruitmentBackground\n    recruitmentNumber\n    requiredSkills\n    welcomeSkills\n    workingConditions\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSkills($skillsWhere: skills_bool_exp = {_and: []}, $worksWhere: work_to_detail_bool_exp = {_and: []}) @cached {\n  skills(where: $skillsWhere) {\n    id\n    type\n    name\n    works_aggregate(where: $worksWhere) {\n      nodes {\n        work {\n          title\n        }\n      }\n      aggregate {\n        count\n      }\n    }\n  }\n}"): (typeof documents)["query GetSkills($skillsWhere: skills_bool_exp = {_and: []}, $worksWhere: work_to_detail_bool_exp = {_and: []}) @cached {\n  skills(where: $skillsWhere) {\n    id\n    type\n    name\n    works_aggregate(where: $worksWhere) {\n      nodes {\n        work {\n          title\n        }\n      }\n      aggregate {\n        count\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation useEditBasicInfo($id: String!, $lastName: String, $firstName: String, $lastNameKana: String, $firstNameKana: String, $birthdayYear: String, $birthdayMounth: String, $birthdayDay: String, $mail: String, $tel: String, $prefectures: String, $currentSituation: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {last_name: $lastName, first_name: $firstName, last_name_kana: $lastNameKana, first_name_kana: $firstNameKana, birthday_year: $birthdayYear, birthday_mounth: $birthdayMounth, birthday_day: $birthdayDay, mail: $mail, tel: $tel, prefectures: $prefectures, current_situation: $currentSituation}\n  ) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n  }\n}"): (typeof documents)["mutation useEditBasicInfo($id: String!, $lastName: String, $firstName: String, $lastNameKana: String, $firstNameKana: String, $birthdayYear: String, $birthdayMounth: String, $birthdayDay: String, $mail: String, $tel: String, $prefectures: String, $currentSituation: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {last_name: $lastName, first_name: $firstName, last_name_kana: $lastNameKana, first_name_kana: $firstNameKana, birthday_year: $birthdayYear, birthday_mounth: $birthdayMounth, birthday_day: $birthdayDay, mail: $mail, tel: $tel, prefectures: $prefectures, current_situation: $currentSituation}\n  ) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserBasicInfo($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n  }\n}"): (typeof documents)["query GetUserBasicInfo($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserDesiredCondition($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}"): (typeof documents)["query GetUserDesiredCondition($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserSkill($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n  }\n}"): (typeof documents)["query GetUserSkill($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation editProfile($id: String!, $lastName: String, $firstName: String, $lastNameKana: String, $firstNameKana: String, $birthdayYear: String, $birthdayMounth: String, $birthdayDay: String, $mail: String, $tel: String, $prefectures: String, $currentSituation: String, $professionalExperience: [String!], $industries: [String!], $languageLibraries: [String!], $frameWork: [String!], $portfolio: String, $selfPr: String, $fileTitle: String, $filePath: String, $commutingTime: String, $amountOfMoney: String, $preferredPlaceOfWork: String, $desiredOccupation: [String!], $desiredIndustries: [String!], $desiredSkills: [String!], $modeOfOperation: [String!], $availableDay: String, $projectStartTime: String, $projectStartYear: String, $projectStartMounth: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {last_name: $lastName, first_name: $firstName, last_name_kana: $lastNameKana, first_name_kana: $firstNameKana, birthday_year: $birthdayYear, birthday_mounth: $birthdayMounth, birthday_day: $birthdayDay, mail: $mail, tel: $tel, prefectures: $prefectures, current_situation: $currentSituation, professional_experience: $professionalExperience, industries: $industries, language_libraries: $languageLibraries, frame_work: $frameWork, portfolio: $portfolio, self_pr: $selfPr, file_title: $fileTitle, file_path: $filePath, commuting_time: $commutingTime, amount_of_money: $amountOfMoney, preferred_place_of_work: $preferredPlaceOfWork, desired_occupation: $desiredOccupation, desired_industries: $desiredIndustries, desired_skills: $desiredSkills, mode_of_operation: $modeOfOperation, available_day: $availableDay, project_start_time: $projectStartTime, project_start_year: $projectStartYear, project_start_mounth: $projectStartMounth}\n  ) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}"): (typeof documents)["mutation editProfile($id: String!, $lastName: String, $firstName: String, $lastNameKana: String, $firstNameKana: String, $birthdayYear: String, $birthdayMounth: String, $birthdayDay: String, $mail: String, $tel: String, $prefectures: String, $currentSituation: String, $professionalExperience: [String!], $industries: [String!], $languageLibraries: [String!], $frameWork: [String!], $portfolio: String, $selfPr: String, $fileTitle: String, $filePath: String, $commutingTime: String, $amountOfMoney: String, $preferredPlaceOfWork: String, $desiredOccupation: [String!], $desiredIndustries: [String!], $desiredSkills: [String!], $modeOfOperation: [String!], $availableDay: String, $projectStartTime: String, $projectStartYear: String, $projectStartMounth: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {last_name: $lastName, first_name: $firstName, last_name_kana: $lastNameKana, first_name_kana: $firstNameKana, birthday_year: $birthdayYear, birthday_mounth: $birthdayMounth, birthday_day: $birthdayDay, mail: $mail, tel: $tel, prefectures: $prefectures, current_situation: $currentSituation, professional_experience: $professionalExperience, industries: $industries, language_libraries: $languageLibraries, frame_work: $frameWork, portfolio: $portfolio, self_pr: $selfPr, file_title: $fileTitle, file_path: $filePath, commuting_time: $commutingTime, amount_of_money: $amountOfMoney, preferred_place_of_work: $preferredPlaceOfWork, desired_occupation: $desiredOccupation, desired_industries: $desiredIndustries, desired_skills: $desiredSkills, mode_of_operation: $modeOfOperation, available_day: $availableDay, project_start_time: $projectStartTime, project_start_year: $projectStartYear, project_start_mounth: $projectStartMounth}\n  ) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserInfo($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}"): (typeof documents)["query GetUserInfo($id: String) {\n  users(where: {id: {_eq: $id}}) {\n    last_name\n    first_name\n    last_name_kana\n    first_name_kana\n    birthday_year\n    birthday_mounth\n    birthday_day\n    mail\n    tel\n    prefectures\n    current_situation\n    professional_experience\n    industries\n    language_libraries\n    frame_work\n    portfolio\n    self_pr\n    file_title\n    file_path\n    commuting_time\n    amount_of_money\n    preferred_place_of_work\n    desired_occupation\n    desired_industries\n    desired_skills\n    mode_of_operation\n    available_day\n    project_start_time\n    project_start_year\n    project_start_mounth\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetWork @cached {\n  work {\n    contractType\n    id\n    location\n    maxMonthlyPrice\n    maxWorkHours\n    minMonthlyPrice\n    minWorkHours\n    title\n    languages {\n      skill {\n        id\n        name\n        type\n      }\n    }\n  }\n}\n\nquery GetWorks($where: work_bool_exp = {_and: []}) @cached {\n  work(where: $where) {\n    id\n    title\n    contractType\n    location\n    maxMonthlyPrice\n    maxWorkHours\n    minMonthlyPrice\n    minWorkHours\n    languages {\n      skill {\n        id\n        name\n        type\n      }\n    }\n  }\n}"): (typeof documents)["query GetWork @cached {\n  work {\n    contractType\n    id\n    location\n    maxMonthlyPrice\n    maxWorkHours\n    minMonthlyPrice\n    minWorkHours\n    title\n    languages {\n      skill {\n        id\n        name\n        type\n      }\n    }\n  }\n}\n\nquery GetWorks($where: work_bool_exp = {_and: []}) @cached {\n  work(where: $where) {\n    id\n    title\n    contractType\n    location\n    maxMonthlyPrice\n    maxWorkHours\n    minMonthlyPrice\n    minWorkHours\n    languages {\n      skill {\n        id\n        name\n        type\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;